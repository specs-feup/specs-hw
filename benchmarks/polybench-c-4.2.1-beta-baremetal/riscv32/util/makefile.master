################################################################################
# Automatically-generated file. Do not edit!
################################################################################

RM := rm -rf

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(strip $(S_UPPER_DEPS)),)
-include $(S_UPPER_DEPS)
endif
ifneq ($(strip $(C_DEPS)),)
-include $(C_DEPS)
endif
endif

CC=riscv32-unknown-elf-

LIBS := -lm
LIBDIR := 
#CFLAGS := -mcmodel=medlow -mtune=rocket -march=rv32imaf -mabi=ilp32f -g -O2 -fbuilding-libgcc -fno-stack-protector -fvisibility=hidden -Wl,--no-relax  -Wl,--gc-sections -ffunction-sections -fdata-sections -ffreestanding -specs=nosys.specs
#CFLAGS := -march=rv32imaf -mabi=ilp32f -g3 -O2 -Wl,--gc-sections -ffunction-sections -fdata-sections
#EXTRAFLAGS := -fstack-check -Werror -Wstack-usage=128000 -Wno-error=unused-function -Wno-error=unknown-pragmas -Wno-error=misleading-indentation -Wno-error=unused-variable


CFLAGS := -mcmodel=medlow -mtune=rocket -march=rv32imaf -mabi=ilp32f -g -O2 -specs=nosys.specs
# THESE ARE THE FLAGS REQUIRED FOR MALLOC TO WORK, FOR SOME REASON (I think its because of the nosys specs which prevents calls to ecall and ebreak etc)
EXTRAFLAGS := -fstack-check -Werror -Wstack-usage=128000 -Wno-error=unused-function -Wno-error=unknown-pragmas -Wno-error=misleading-indentation -Wno-error=unused-variable

OBJDIR=$(ROOT)/build/$(KERNEL)

###############################################################################
# Add inputs and outputs from these tool invocations to the build variables 
LD_SRCS = $(ROOT)/lib/riscv32-virt.ld 
C_SRCS = ./$(KERNEL).c 
OBJS = $(OBJDIR)/$(KERNEL).o 
C_DEPS = $(OBJDIR)/$(KERNEL).d

# Each subdirectory must supply rules for building sources it contributes
$(OBJDIR)/%.o : %.c
	@echo 'Building file: $<'
	@echo 'Invoking: $(CROSS_PREFIX)gcc'
	$(CC)gcc $(KERNEL_OPTIONS) -I$(RELATIVE)/lib -c -fmessage-length=0 -MT"$@" $(CFLAGS) $(EXTRAFLAGS) -Wl,--no-relax -ffunction-sections -fdata-sections -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@)" -o "$@" "$<"
	@echo 'Finished building: $<'
	@echo ' '

###############################################################################
# Add inputs and outputs from these tool invocations to the build variables 
ELFSIZE = $(KERNEL).elf.size

# All Target
all: $(OBJDIR)/$(KERNEL).elf 

#$(OBJDIR)/$(KERNEL).elf.size

$(OBJDIR):
	mkdir -p $(OBJDIR)

USER_OBJS := $(OBJDIR)/crt0.o

# _start
$(OBJDIR)/crt0.o: $(ROOT)/lib/crt0.s $(OBJDIR)
	$(CC)gcc $(KERNEL_OPTIONS) -I$(RELATIVE)/lib -c $(CFLAGS) -o "$@" "$<"

# Tool invocations
$(OBJDIR)/$(KERNEL).elf: $(OBJDIR) $(OBJS) $(USER_OBJS) $(LD_SRCS)
	@echo 'Building target: $@'
	@echo 'Invoking: $(CROSS_PREFIX)ld'
	$(CC)gcc -Wl,-T -Wl,$(LD_SRCS) $(CFLAGS) $(EXTRAFLAGS) -nostartfiles -o "$(OBJDIR)/$(KERNEL).elf" $(OBJS) $(USER_OBJS) $(LIBS)
	rm $(OBJS) $(C_DEPS) $(USER_OBJS)
	@echo 'Finished building target: $@'
	@echo ' '

$(OBJDIR)/$(KERNEL).elf.size: $(OBJDIR)/$(KERNEL).elf
	@echo 'Invoking: $(CROSS_PREFIX)size'
	$(CC)size $(KERNEL).elf  |tee "$(OBJDIR)/$(KERNEL).elf.size"
	@echo 'Finished building: $@'
	@echo ' '

# Other Targets
clean:
	-$(RM) $(OBJS) $(USER_OBJS) $(OBJDIR)/$(C_DEPS) $(OBJDIR)/$(KERNEL).elf $(OBJDIR)/$(KERNEL).elf.size $(OBJDIR) $(OBJDIR)/crt0.o
	-@echo ' '

# print rule
print-%: ; @echo $*=$($*)

.PHONY: all clean dependents
.SECONDARY:

