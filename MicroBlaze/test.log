0x00000050 in _start1 ()
Dump of assembler code from 0x50 to 0x51:
=> 0x00000050 <_start1+0>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000058 in _start1 ()
Dump of assembler code from 0x58 to 0x59:
=> 0x00000058 <_start1+8>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000060 in _start1 ()
Dump of assembler code from 0x60 to 0x61:
=> 0x00000060 <_start1+16>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000068 in _start1 ()
Dump of assembler code from 0x68 to 0x69:
=> 0x00000068 <_start1+24>:	00 00 00 b0	imm	0
End of assembler dump.
0x0000023c in _crtinit ()
Dump of assembler code from 0x23c to 0x23d:
=> 0x0000023c <_crtinit+0>:	d8 ff 21 20	addi	r1, r1, -40
End of assembler dump.
0x00000240 in _crtinit ()
Dump of assembler code from 0x240 to 0x241:
=> 0x00000240 <_crtinit+4>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000244 in _crtinit ()
Dump of assembler code from 0x244 to 0x245:
=> 0x00000244 <_crtinit+8>:	00 00 00 b0	imm	0
End of assembler dump.
0x0000024c in _crtinit ()
Dump of assembler code from 0x24c to 0x24d:
=> 0x0000024c <_crtinit+16>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000254 in _crtinit ()
Dump of assembler code from 0x254 to 0x255:
=> 0x00000254 <_crtinit+24>:	00 38 46 06	rsub	r18, r6, r7
End of assembler dump.
0x00000258 in _crtinit ()
Dump of assembler code from 0x258 to 0x259:
=> 0x00000258 <_crtinit+28>:	14 00 72 bc	blei	r18, 20	// 0x26c <_crtinit+48>
End of assembler dump.
0x0000026c in _crtinit ()
Dump of assembler code from 0x26c to 0x26d:
=> 0x0000026c <_crtinit+48>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000274 in _crtinit ()
Dump of assembler code from 0x274 to 0x275:
=> 0x00000274 <_crtinit+56>:	00 00 00 b0	imm	0
End of assembler dump.
0x0000027c in _crtinit ()
Dump of assembler code from 0x27c to 0x27d:
=> 0x0000027c <_crtinit+64>:	00 38 46 06	rsub	r18, r6, r7
End of assembler dump.
0x00000280 in _crtinit ()
Dump of assembler code from 0x280 to 0x281:
=> 0x00000280 <_crtinit+68>:	14 00 72 bc	blei	r18, 20	// 0x294 <_crtinit+88>
End of assembler dump.
0x00000284 in _crtinit ()
Dump of assembler code from 0x284 to 0x285:
=> 0x00000284 <_crtinit+72>:	00 00 06 f8	swi	r0, r6, 0
End of assembler dump.
0x00000288 in _crtinit ()
Dump of assembler code from 0x288 to 0x289:
=> 0x00000288 <_crtinit+76>:	04 00 c6 20	addi	r6, r6, 4
End of assembler dump.
0x0000028c in _crtinit ()
Dump of assembler code from 0x28c to 0x28d:
=> 0x0000028c <_crtinit+80>:	00 38 46 06	rsub	r18, r6, r7
End of assembler dump.
0x00000290 in _crtinit ()
Dump of assembler code from 0x290 to 0x291:
=> 0x00000290 <_crtinit+84>:	f4 ff 92 bc	bgti	r18, -12	// 0x284 <_crtinit+72>
End of assembler dump.
0x00000284 in _crtinit ()
Dump of assembler code from 0x284 to 0x285:
=> 0x00000284 <_crtinit+72>:	00 00 06 f8	swi	r0, r6, 0
End of assembler dump.
0x00000288 in _crtinit ()
Dump of assembler code from 0x288 to 0x289:
=> 0x00000288 <_crtinit+76>:	04 00 c6 20	addi	r6, r6, 4
End of assembler dump.
0x0000028c in _crtinit ()
Dump of assembler code from 0x28c to 0x28d:
=> 0x0000028c <_crtinit+80>:	00 38 46 06	rsub	r18, r6, r7
End of assembler dump.
0x00000290 in _crtinit ()
Dump of assembler code from 0x290 to 0x291:
=> 0x00000290 <_crtinit+84>:	f4 ff 92 bc	bgti	r18, -12	// 0x284 <_crtinit+72>
End of assembler dump.
0x00000284 in _crtinit ()
Dump of assembler code from 0x284 to 0x285:
=> 0x00000284 <_crtinit+72>:	00 00 06 f8	swi	r0, r6, 0
End of assembler dump.
0x00000288 in _crtinit ()
Dump of assembler code from 0x288 to 0x289:
=> 0x00000288 <_crtinit+76>:	04 00 c6 20	addi	r6, r6, 4
End of assembler dump.
0x0000028c in _crtinit ()
Dump of assembler code from 0x28c to 0x28d:
=> 0x0000028c <_crtinit+80>:	00 38 46 06	rsub	r18, r6, r7
End of assembler dump.
0x00000290 in _crtinit ()
Dump of assembler code from 0x290 to 0x291:
=> 0x00000290 <_crtinit+84>:	f4 ff 92 bc	bgti	r18, -12	// 0x284 <_crtinit+72>
End of assembler dump.
0x00000284 in _crtinit ()
Dump of assembler code from 0x284 to 0x285:
=> 0x00000284 <_crtinit+72>:	00 00 06 f8	swi	r0, r6, 0
End of assembler dump.
0x00000288 in _crtinit ()
Dump of assembler code from 0x288 to 0x289:
=> 0x00000288 <_crtinit+76>:	04 00 c6 20	addi	r6, r6, 4
End of assembler dump.
0x0000028c in _crtinit ()
Dump of assembler code from 0x28c to 0x28d:
=> 0x0000028c <_crtinit+80>:	00 38 46 06	rsub	r18, r6, r7
End of assembler dump.
0x00000290 in _crtinit ()
Dump of assembler code from 0x290 to 0x291:
=> 0x00000290 <_crtinit+84>:	f4 ff 92 bc	bgti	r18, -12	// 0x284 <_crtinit+72>
End of assembler dump.
0x00000284 in _crtinit ()
Dump of assembler code from 0x284 to 0x285:
=> 0x00000284 <_crtinit+72>:	00 00 06 f8	swi	r0, r6, 0
End of assembler dump.
0x00000288 in _crtinit ()
Dump of assembler code from 0x288 to 0x289:
=> 0x00000288 <_crtinit+76>:	04 00 c6 20	addi	r6, r6, 4
End of assembler dump.
0x0000028c in _crtinit ()
Dump of assembler code from 0x28c to 0x28d:
=> 0x0000028c <_crtinit+80>:	00 38 46 06	rsub	r18, r6, r7
End of assembler dump.
0x00000290 in _crtinit ()
Dump of assembler code from 0x290 to 0x291:
=> 0x00000290 <_crtinit+84>:	f4 ff 92 bc	bgti	r18, -12	// 0x284 <_crtinit+72>
End of assembler dump.
0x00000284 in _crtinit ()
Dump of assembler code from 0x284 to 0x285:
=> 0x00000284 <_crtinit+72>:	00 00 06 f8	swi	r0, r6, 0
End of assembler dump.
0x00000288 in _crtinit ()
Dump of assembler code from 0x288 to 0x289:
=> 0x00000288 <_crtinit+76>:	04 00 c6 20	addi	r6, r6, 4
End of assembler dump.
0x0000028c in _crtinit ()
Dump of assembler code from 0x28c to 0x28d:
=> 0x0000028c <_crtinit+80>:	00 38 46 06	rsub	r18, r6, r7
End of assembler dump.
0x00000290 in _crtinit ()
Dump of assembler code from 0x290 to 0x291:
=> 0x00000290 <_crtinit+84>:	f4 ff 92 bc	bgti	r18, -12	// 0x284 <_crtinit+72>
End of assembler dump.
0x00000284 in _crtinit ()
Dump of assembler code from 0x284 to 0x285:
=> 0x00000284 <_crtinit+72>:	00 00 06 f8	swi	r0, r6, 0
End of assembler dump.
0x00000288 in _crtinit ()
Dump of assembler code from 0x288 to 0x289:
=> 0x00000288 <_crtinit+76>:	04 00 c6 20	addi	r6, r6, 4
End of assembler dump.
0x0000028c in _crtinit ()
Dump of assembler code from 0x28c to 0x28d:
=> 0x0000028c <_crtinit+80>:	00 38 46 06	rsub	r18, r6, r7
End of assembler dump.
0x00000290 in _crtinit ()
Dump of assembler code from 0x290 to 0x291:
=> 0x00000290 <_crtinit+84>:	f4 ff 92 bc	bgti	r18, -12	// 0x284 <_crtinit+72>
End of assembler dump.
0x00000284 in _crtinit ()
Dump of assembler code from 0x284 to 0x285:
=> 0x00000284 <_crtinit+72>:	00 00 06 f8	swi	r0, r6, 0
End of assembler dump.
0x00000288 in _crtinit ()
Dump of assembler code from 0x288 to 0x289:
=> 0x00000288 <_crtinit+76>:	04 00 c6 20	addi	r6, r6, 4
End of assembler dump.
0x0000028c in _crtinit ()
Dump of assembler code from 0x28c to 0x28d:
=> 0x0000028c <_crtinit+80>:	00 38 46 06	rsub	r18, r6, r7
End of assembler dump.
0x00000290 in _crtinit ()
Dump of assembler code from 0x290 to 0x291:
=> 0x00000290 <_crtinit+84>:	f4 ff 92 bc	bgti	r18, -12	// 0x284 <_crtinit+72>
End of assembler dump.
0x00000294 in _crtinit ()
Dump of assembler code from 0x294 to 0x295:
=> 0x00000294 <_crtinit+88>:	00 00 00 b0	imm	0
End of assembler dump.
0x0000057c in _program_init ()
Dump of assembler code from 0x57c to 0x57d:
=> 0x0000057c <_program_init+0>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x000002a0 in _crtinit ()
Dump of assembler code from 0x2a0 to 0x2a1:
=> 0x000002a0 <_crtinit+100>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a7c in __init ()
Dump of assembler code from 0xa7c to 0xa7d:
=> 0x00000a7c <__init+0>:	f0 ff 21 30	addik	r1, r1, -16
End of assembler dump.
0x00000a80 in __init ()
Dump of assembler code from 0xa80 to 0xa81:
=> 0x00000a80 <__init+4>:	00 08 e0 d9	sw	r15, r0, r1
End of assembler dump.
0x00000a84 in __init ()
Dump of assembler code from 0xa84 to 0xa85:
=> 0x00000a84 <__init+8>:	ff ff 60 31	addik	r11, r0, -1
End of assembler dump.
0x00000a88 in __init ()
Dump of assembler code from 0xa88 to 0xa89:
=> 0x00000a88 <__init+12>:	02 c8 0b 94	mts	rshr, r11
End of assembler dump.
0x00000a8c in __init ()
Dump of assembler code from 0xa8c to 0xa8d:
=> 0x00000a8c <__init+16>:	00 00 60 31	addik	r11, r0, 0
End of assembler dump.
0x00000a90 in __init ()
Dump of assembler code from 0xa90 to 0xa91:
=> 0x00000a90 <__init+20>:	00 c8 0b 94	mts	rslr, r11
End of assembler dump.
0x00000a94 in __init ()
Dump of assembler code from 0xa94 to 0xa95:
=> 0x00000a94 <__init+24>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x000001f8 in frame_dummy ()
Dump of assembler code from 0x1f8 to 0x1f9:
=> 0x000001f8 <frame_dummy+0>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000200 in frame_dummy ()
Dump of assembler code from 0x200 to 0x201:
=> 0x00000200 <frame_dummy+8>:	e4 ff 21 30	addik	r1, r1, -28
End of assembler dump.
0x00000204 in frame_dummy ()
Dump of assembler code from 0x204 to 0x205:
=> 0x00000204 <frame_dummy+12>:	24 00 03 be	beqid	r3, 36	// 0x228 <frame_dummy+48>
End of assembler dump.
0x00000228 in frame_dummy ()
Dump of assembler code from 0x228 to 0x229:
=> 0x00000228 <frame_dummy+48>:	a4 fe f4 b9	brlid	r15, -348	// 0xcc <register_tm_clones>
End of assembler dump.
0x000000cc in register_tm_clones ()
Dump of assembler code from 0xcc to 0xcd:
=> 0x000000cc <register_tm_clones+0>:	00 00 00 b0	imm	0
End of assembler dump.
0x000000d4 in register_tm_clones ()
Dump of assembler code from 0xd4 to 0xd5:
=> 0x000000d4 <register_tm_clones+8>:	00 00 00 b0	imm	0
End of assembler dump.
0x000000dc in register_tm_clones ()
Dump of assembler code from 0xdc to 0xdd:
=> 0x000000dc <register_tm_clones+16>:	00 30 c5 14	rsubk	r6, r5, r6
End of assembler dump.
0x000000e0 in register_tm_clones ()
Dump of assembler code from 0xe0 to 0xe1:
=> 0x000000e0 <register_tm_clones+20>:	02 02 c6 64	bsrai	r6, r6, 2
End of assembler dump.
0x000000e4 in register_tm_clones ()
Dump of assembler code from 0xe4 to 0xe5:
=> 0x000000e4 <register_tm_clones+24>:	1f 00 66 64	bsrli	r3, r6, 31
End of assembler dump.
0x000000e8 in register_tm_clones ()
Dump of assembler code from 0xe8 to 0xe9:
=> 0x000000e8 <register_tm_clones+28>:	00 30 c3 10	addk	r6, r3, r6
End of assembler dump.
0x000000ec in register_tm_clones ()
Dump of assembler code from 0xec to 0xed:
=> 0x000000ec <register_tm_clones+32>:	01 00 c6 90	sra	r6, r6
End of assembler dump.
0x000000f0 in register_tm_clones ()
Dump of assembler code from 0xf0 to 0xf1:
=> 0x000000f0 <register_tm_clones+36>:	2c 00 06 bc	beqi	r6, 44	// 0x11c <register_tm_clones+80>
End of assembler dump.
0x0000011c in register_tm_clones ()
Dump of assembler code from 0x11c to 0x11d:
=> 0x0000011c <register_tm_clones+80>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000230 in frame_dummy ()
Dump of assembler code from 0x230 to 0x231:
=> 0x00000230 <frame_dummy+56>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000234 in frame_dummy ()
Dump of assembler code from 0x234 to 0x235:
=> 0x00000234 <frame_dummy+60>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000aa0 in __init ()
Dump of assembler code from 0xaa0 to 0xaa1:
=> 0x00000aa0 <__init+36>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x00000584 in __do_global_ctors_aux ()
Dump of assembler code from 0x584 to 0x585:
=> 0x00000584 <__do_global_ctors_aux+0>:	00 00 00 b0	imm	0
End of assembler dump.
0x0000058c in __do_global_ctors_aux ()
Dump of assembler code from 0x58c to 0x58d:
=> 0x0000058c <__do_global_ctors_aux+8>:	ff ff 83 a8	xori	r4, r3, -1
End of assembler dump.
0x00000590 in __do_global_ctors_aux ()
Dump of assembler code from 0x590 to 0x591:
=> 0x00000590 <__do_global_ctors_aux+12>:	3c 00 04 bc	beqi	r4, 60	// 0x5cc <__do_global_ctors_aux+72>
End of assembler dump.
0x000005cc in __do_global_ctors_aux ()
Dump of assembler code from 0x5cc to 0x5cd:
=> 0x000005cc <__do_global_ctors_aux+72>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000aac in __init ()
Dump of assembler code from 0xaac to 0xaad:
=> 0x00000aac <__init+48>:	00 08 e0 c9	lw	r15, r0, r1
End of assembler dump.
0x00000ab0 in __init ()
Dump of assembler code from 0xab0 to 0xab1:
=> 0x00000ab0 <__init+52>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x000002ac in _crtinit ()
Dump of assembler code from 0x2ac to 0x2ad:
=> 0x000002ac <_crtinit+112>:	00 00 c0 20	addi	r6, r0, 0
End of assembler dump.
0x000002b0 in _crtinit ()
Dump of assembler code from 0x2b0 to 0x2b1:
=> 0x000002b0 <_crtinit+116>:	00 00 e0 20	addi	r7, r0, 0
End of assembler dump.
0x000002b4 in _crtinit ()
Dump of assembler code from 0x2b4 to 0x2b5:
=> 0x000002b4 <_crtinit+120>:	00 00 00 b0	imm	0
End of assembler dump.
main () at ../src/helloworld.c:54
54	{
Dump of assembler code from 0x5d4 to 0x5d5:
=> 0x000005d4 <main+0>:	e0 ff 21 30	addik	r1, r1, -32
End of assembler dump.
0x000005d8	54	{
Dump of assembler code from 0x5d8 to 0x5d9:
=> 0x000005d8 <main+4>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x000005dc	54	{
Dump of assembler code from 0x5dc to 0x5dd:
=> 0x000005dc <main+8>:	1c 00 61 fa	swi	r19, r1, 28
End of assembler dump.
0x000005e0	54	{
Dump of assembler code from 0x5e0 to 0x5e1:
=> 0x000005e0 <main+12>:	00 00 61 12	addk	r19, r1, r0
End of assembler dump.
55	    init_platform();
Dump of assembler code from 0x5e4 to 0x5e5:
=> 0x000005e4 <main+16>:	00 00 00 b0	imm	0
End of assembler dump.
init_platform () at ../src/platform.c:93
93	{
Dump of assembler code from 0x6d8 to 0x6d9:
=> 0x000006d8 <init_platform+0>:	e0 ff 21 30	addik	r1, r1, -32
End of assembler dump.
0x000006dc	93	{
Dump of assembler code from 0x6dc to 0x6dd:
=> 0x000006dc <init_platform+4>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x000006e0	93	{
Dump of assembler code from 0x6e0 to 0x6e1:
=> 0x000006e0 <init_platform+8>:	1c 00 61 fa	swi	r19, r1, 28
End of assembler dump.
0x000006e4	93	{
Dump of assembler code from 0x6e4 to 0x6e5:
=> 0x000006e4 <init_platform+12>:	00 00 61 12	addk	r19, r1, r0
End of assembler dump.
103	    enable_caches();
Dump of assembler code from 0x6e8 to 0x6e9:
=> 0x000006e8 <init_platform+16>:	ff ff 00 b0	imm	-1
End of assembler dump.
enable_caches () at ../src/platform.c:54
54	{
Dump of assembler code from 0x62c to 0x62d:
=> 0x0000062c <enable_caches+0>:	f8 ff 21 30	addik	r1, r1, -8
End of assembler dump.
0x00000630	54	{
Dump of assembler code from 0x630 to 0x631:
=> 0x00000630 <enable_caches+4>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000634	54	{
Dump of assembler code from 0x634 to 0x635:
=> 0x00000634 <enable_caches+8>:	04 00 61 fa	swi	r19, r1, 4
End of assembler dump.
0x00000638	54	{
Dump of assembler code from 0x638 to 0x639:
=> 0x00000638 <enable_caches+12>:	00 00 61 12	addk	r19, r1, r0
End of assembler dump.
60	    Xil_ICacheEnable();
Dump of assembler code from 0x63c to 0x63d:
=> 0x0000063c <enable_caches+16>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x00000304 in microblaze_enable_icache ()
Dump of assembler code from 0x304 to 0x305:
=> 0x00000304 <microblaze_enable_icache+0>:	01 80 00 95	mfs	r8, rmsr
End of assembler dump.
0x00000308 in microblaze_enable_icache ()
Dump of assembler code from 0x308 to 0x309:
=> 0x00000308 <microblaze_enable_icache+4>:	20 00 08 a1	ori	r8, r8, 32
End of assembler dump.
0x0000030c in microblaze_enable_icache ()
Dump of assembler code from 0x30c to 0x30d:
=> 0x0000030c <microblaze_enable_icache+8>:	01 c0 08 94	mts	rmsr, r8
End of assembler dump.
0x00000310 in microblaze_enable_icache ()
Dump of assembler code from 0x310 to 0x311:
=> 0x00000310 <microblaze_enable_icache+12>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
enable_caches () at ../src/platform.c:63
63	    Xil_DCacheEnable();
Dump of assembler code from 0x648 to 0x649:
=> 0x00000648 <enable_caches+28>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x000002f0 in microblaze_enable_dcache ()
Dump of assembler code from 0x2f0 to 0x2f1:
=> 0x000002f0 <microblaze_enable_dcache+0>:	01 80 00 95	mfs	r8, rmsr
End of assembler dump.
0x000002f4 in microblaze_enable_dcache ()
Dump of assembler code from 0x2f4 to 0x2f5:
=> 0x000002f4 <microblaze_enable_dcache+4>:	80 00 08 a1	ori	r8, r8, 128
End of assembler dump.
0x000002f8 in microblaze_enable_dcache ()
Dump of assembler code from 0x2f8 to 0x2f9:
=> 0x000002f8 <microblaze_enable_dcache+8>:	01 c0 08 94	mts	rmsr, r8
End of assembler dump.
0x000002fc in microblaze_enable_dcache ()
Dump of assembler code from 0x2fc to 0x2fd:
=> 0x000002fc <microblaze_enable_dcache+12>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
enable_caches () at ../src/platform.c:66
66	}
Dump of assembler code from 0x654 to 0x655:
=> 0x00000654 <enable_caches+40>:	00 00 00 80	or	r0, r0, r0
End of assembler dump.
0x00000658	66	}
Dump of assembler code from 0x658 to 0x659:
=> 0x00000658 <enable_caches+44>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x0000065c	66	}
Dump of assembler code from 0x65c to 0x65d:
=> 0x0000065c <enable_caches+48>:	00 00 33 10	addk	r1, r19, r0
End of assembler dump.
0x00000660	66	}
Dump of assembler code from 0x660 to 0x661:
=> 0x00000660 <enable_caches+52>:	04 00 61 ea	lwi	r19, r1, 4
End of assembler dump.
0x00000664 in enable_caches () at ../src/platform.c:66
66	}
Dump of assembler code from 0x664 to 0x665:
=> 0x00000664 <enable_caches+56>:	08 00 21 30	addik	r1, r1, 8
End of assembler dump.
0x00000668	66	}
Dump of assembler code from 0x668 to 0x669:
=> 0x00000668 <enable_caches+60>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
init_platform () at ../src/platform.c:104
104	    init_uart();
Dump of assembler code from 0x6f4 to 0x6f5:
=> 0x000006f4 <init_platform+28>:	ff ff 00 b0	imm	-1
End of assembler dump.
init_uart () at ../src/platform.c:83
83	{
Dump of assembler code from 0x6b4 to 0x6b5:
=> 0x000006b4 <init_uart+0>:	f8 ff 21 30	addik	r1, r1, -8
End of assembler dump.
0x000006b8	83	{
Dump of assembler code from 0x6b8 to 0x6b9:
=> 0x000006b8 <init_uart+4>:	04 00 61 fa	swi	r19, r1, 4
End of assembler dump.
0x000006bc	83	{
Dump of assembler code from 0x6bc to 0x6bd:
=> 0x000006bc <init_uart+8>:	00 00 61 12	addk	r19, r1, r0
End of assembler dump.
89	}
Dump of assembler code from 0x6c0 to 0x6c1:
=> 0x000006c0 <init_uart+12>:	00 00 00 80	or	r0, r0, r0
End of assembler dump.
0x000006c4	89	}
Dump of assembler code from 0x6c4 to 0x6c5:
=> 0x000006c4 <init_uart+16>:	00 00 33 10	addk	r1, r19, r0
End of assembler dump.
0x000006c8	89	}
Dump of assembler code from 0x6c8 to 0x6c9:
=> 0x000006c8 <init_uart+20>:	04 00 61 ea	lwi	r19, r1, 4
End of assembler dump.
0x000006cc in init_uart () at ../src/platform.c:89
89	}
Dump of assembler code from 0x6cc to 0x6cd:
=> 0x000006cc <init_uart+24>:	08 00 21 30	addik	r1, r1, 8
End of assembler dump.
0x000006d0	89	}
Dump of assembler code from 0x6d0 to 0x6d1:
=> 0x000006d0 <init_uart+28>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
init_platform () at ../src/platform.c:105
105	}
Dump of assembler code from 0x700 to 0x701:
=> 0x00000700 <init_platform+40>:	00 00 00 80	or	r0, r0, r0
End of assembler dump.
0x00000704	105	}
Dump of assembler code from 0x704 to 0x705:
=> 0x00000704 <init_platform+44>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000708	105	}
Dump of assembler code from 0x708 to 0x709:
=> 0x00000708 <init_platform+48>:	00 00 33 10	addk	r1, r19, r0
End of assembler dump.
0x0000070c	105	}
Dump of assembler code from 0x70c to 0x70d:
=> 0x0000070c <init_platform+52>:	1c 00 61 ea	lwi	r19, r1, 28
End of assembler dump.
0x00000710 in init_platform () at ../src/platform.c:105
105	}
Dump of assembler code from 0x710 to 0x711:
=> 0x00000710 <init_platform+56>:	20 00 21 30	addik	r1, r1, 32
End of assembler dump.
0x00000714	105	}
Dump of assembler code from 0x714 to 0x715:
=> 0x00000714 <init_platform+60>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
main () at ../src/helloworld.c:57
57	    print("Hello World\n\r");
Dump of assembler code from 0x5f0 to 0x5f1:
=> 0x000005f0 <main+28>:	00 00 00 b0	imm	0
End of assembler dump.
0x000005f8	57	    print("Hello World\n\r");
Dump of assembler code from 0x5f8 to 0x5f9:
=> 0x000005f8 <main+36>:	00 00 00 b0	imm	0
End of assembler dump.
0x000007f8 in print ()
Dump of assembler code from 0x7f8 to 0x7f9:
=> 0x000007f8 <print+0>:	f8 ff 21 30	addik	r1, r1, -8
End of assembler dump.
0x000007fc in print ()
Dump of assembler code from 0x7fc to 0x7fd:
=> 0x000007fc <print+4>:	04 00 61 fa	swi	r19, r1, 4
End of assembler dump.
0x00000800 in print ()
Dump of assembler code from 0x800 to 0x801:
=> 0x00000800 <print+8>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000804 in print ()
Dump of assembler code from 0x804 to 0x805:
=> 0x00000804 <print+12>:	00 00 65 12	addk	r19, r5, r0
End of assembler dump.
0x00000808 in print ()
Dump of assembler code from 0x808 to 0x809:
=> 0x00000808 <print+16>:	00 00 a5 e0	lbui	r5, r5, 0
End of assembler dump.
0x0000080c in print ()
Dump of assembler code from 0x80c to 0x80d:
=> 0x0000080c <print+20>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x00000810 in print ()
Dump of assembler code from 0x810 to 0x811:
=> 0x00000810 <print+24>:	24 00 05 be	beqid	r5, 36	// 0x834 <print+60>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000818 in print ()
Dump of assembler code from 0x818 to 0x819:
=> 0x00000818 <print+32>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a2c in outbyte ()
Dump of assembler code from 0xa2c to 0xa2d:
=> 0x00000a2c <outbyte+0>:	ff 00 c5 a4	andi	r6, r5, 255
End of assembler dump.
0x00000a30 in outbyte ()
Dump of assembler code from 0xa30 to 0xa31:
=> 0x00000a30 <outbyte+4>:	60 40 00 b0	imm	16480
End of assembler dump.
0x00000a38 in outbyte ()
Dump of assembler code from 0xa38 to 0xa39:
=> 0x00000a38 <outbyte+12>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000a3c in outbyte ()
Dump of assembler code from 0xa3c to 0xa3d:
=> 0x00000a3c <outbyte+16>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000a40 in outbyte ()
Dump of assembler code from 0xa40 to 0xa41:
=> 0x00000a40 <outbyte+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000a58 in XUartLite_SendByte ()
Dump of assembler code from 0xa58 to 0xa59:
=> 0x00000a58 <XUartLite_SendByte+0>:	08 00 85 30	addik	r4, r5, 8
End of assembler dump.
0x00000a5c in XUartLite_SendByte ()
Dump of assembler code from 0xa5c to 0xa5d:
=> 0x00000a5c <XUartLite_SendByte+4>:	00 00 64 e8	lwi	r3, r4, 0
End of assembler dump.
0x00000a60 in XUartLite_SendByte ()
Dump of assembler code from 0xa60 to 0xa61:
=> 0x00000a60 <XUartLite_SendByte+8>:	08 00 63 a4	andi	r3, r3, 8
End of assembler dump.
0x00000a64 in XUartLite_SendByte ()
Dump of assembler code from 0xa64 to 0xa65:
=> 0x00000a64 <XUartLite_SendByte+12>:	f8 ff 23 bc	bnei	r3, -8	// 0xa5c <XUartLite_SendByte+4>
End of assembler dump.
0x00000a68 in XUartLite_SendByte ()
Dump of assembler code from 0xa68 to 0xa69:
=> 0x00000a68 <XUartLite_SendByte+16>:	04 00 c5 f8	swi	r6, r5, 4
End of assembler dump.
0x00000a6c in XUartLite_SendByte ()
Dump of assembler code from 0xa6c to 0xa6d:
=> 0x00000a6c <XUartLite_SendByte+20>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000a4c in outbyte ()
Dump of assembler code from 0xa4c to 0xa4d:
=> 0x00000a4c <outbyte+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000a50 in outbyte ()
Dump of assembler code from 0xa50 to 0xa51:
=> 0x00000a50 <outbyte+36>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000824 in print ()
Dump of assembler code from 0x824 to 0x825:
=> 0x00000824 <print+44>:	00 00 b3 e0	lbui	r5, r19, 0
End of assembler dump.
0x00000828 in print ()
Dump of assembler code from 0x828 to 0x829:
=> 0x00000828 <print+48>:	60 00 a5 90	sext8	r5, r5
End of assembler dump.
0x0000082c in print ()
Dump of assembler code from 0x82c to 0x82d:
=> 0x0000082c <print+52>:	ec ff 25 be	bneid	r5, -20	// 0x818 <print+32>
End of assembler dump.
0x00000834 in print ()
Dump of assembler code from 0x834 to 0x835:
=> 0x00000834 <print+60>:	04 00 61 ea	lwi	r19, r1, 4
End of assembler dump.
0x00000838 in print ()
Dump of assembler code from 0x838 to 0x839:
=> 0x00000838 <print+64>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
main () at ../src/helloworld.c:59
59	    cleanup_platform();
Dump of assembler code from 0x604 to 0x605:
=> 0x00000604 <main+48>:	00 00 00 b0	imm	0
End of assembler dump.
cleanup_platform () at ../src/platform.c:109
109	{
Dump of assembler code from 0x71c to 0x71d:
=> 0x0000071c <cleanup_platform+0>:	e0 ff 21 30	addik	r1, r1, -32
End of assembler dump.
0x00000720	109	{
Dump of assembler code from 0x720 to 0x721:
=> 0x00000720 <cleanup_platform+4>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000724	109	{
Dump of assembler code from 0x724 to 0x725:
=> 0x00000724 <cleanup_platform+8>:	1c 00 61 fa	swi	r19, r1, 28
End of assembler dump.
0x00000728	109	{
Dump of assembler code from 0x728 to 0x729:
=> 0x00000728 <cleanup_platform+12>:	00 00 61 12	addk	r19, r1, r0
End of assembler dump.
110	    disable_caches();
Dump of assembler code from 0x72c to 0x72d:
=> 0x0000072c <cleanup_platform+16>:	ff ff 00 b0	imm	-1
End of assembler dump.
disable_caches () at ../src/platform.c:70
70	{
Dump of assembler code from 0x670 to 0x671:
=> 0x00000670 <disable_caches+0>:	f8 ff 21 30	addik	r1, r1, -8
End of assembler dump.
0x00000674	70	{
Dump of assembler code from 0x674 to 0x675:
=> 0x00000674 <disable_caches+4>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000678	70	{
Dump of assembler code from 0x678 to 0x679:
=> 0x00000678 <disable_caches+8>:	04 00 61 fa	swi	r19, r1, 4
End of assembler dump.
0x0000067c	70	{
Dump of assembler code from 0x67c to 0x67d:
=> 0x0000067c <disable_caches+12>:	00 00 61 12	addk	r19, r1, r0
End of assembler dump.
73	    Xil_DCacheDisable();
Dump of assembler code from 0x680 to 0x681:
=> 0x00000680 <disable_caches+16>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000840 in Xil_DCacheDisable ()
Dump of assembler code from 0x840 to 0x841:
=> 0x00000840 <Xil_DCacheDisable+0>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000844 in Xil_DCacheDisable ()
Dump of assembler code from 0x844 to 0x845:
=> 0x00000844 <Xil_DCacheDisable+4>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000848 in Xil_DCacheDisable ()
Dump of assembler code from 0x848 to 0x849:
=> 0x00000848 <Xil_DCacheDisable+8>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x00000344 in microblaze_flush_cache_ext ()
Dump of assembler code from 0x344 to 0x345:
=> 0x00000344 <microblaze_flush_cache_ext+0>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000854 in Xil_DCacheDisable ()
Dump of assembler code from 0x854 to 0x855:
=> 0x00000854 <Xil_DCacheDisable+20>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x00000354 in microblaze_invalidate_dcache ()
Dump of assembler code from 0x354 to 0x355:
=> 0x00000354 <microblaze_invalidate_dcache+0>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000860 in Xil_DCacheDisable ()
Dump of assembler code from 0x860 to 0x861:
=> 0x00000860 <Xil_DCacheDisable+32>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x0000034c in microblaze_invalidate_cache_ext ()
Dump of assembler code from 0x34c to 0x34d:
=> 0x0000034c <microblaze_invalidate_cache_ext+0>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x0000086c in Xil_DCacheDisable ()
Dump of assembler code from 0x86c to 0x86d:
=> 0x0000086c <Xil_DCacheDisable+44>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x00000354 in microblaze_invalidate_dcache ()
Dump of assembler code from 0x354 to 0x355:
=> 0x00000354 <microblaze_invalidate_dcache+0>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000878 in Xil_DCacheDisable ()
Dump of assembler code from 0x878 to 0x879:
=> 0x00000878 <Xil_DCacheDisable+56>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x00000318 in microblaze_disable_dcache ()
Dump of assembler code from 0x318 to 0x319:
=> 0x00000318 <microblaze_disable_dcache+0>:	f8 ff 21 30	addik	r1, r1, -8
End of assembler dump.
0x0000031c in microblaze_disable_dcache ()
Dump of assembler code from 0x31c to 0x31d:
=> 0x0000031c <microblaze_disable_dcache+4>:	01 80 60 95	mfs	r11, rmsr
End of assembler dump.
0x00000320 in microblaze_disable_dcache ()
Dump of assembler code from 0x320 to 0x321:
=> 0x00000320 <microblaze_disable_dcache+8>:	7f ff 6b a5	andi	r11, r11, -129
End of assembler dump.
0x00000324 in microblaze_disable_dcache ()
Dump of assembler code from 0x324 to 0x325:
=> 0x00000324 <microblaze_disable_dcache+12>:	01 c0 0b 94	mts	rmsr, r11
End of assembler dump.
0x00000328 in microblaze_disable_dcache ()
Dump of assembler code from 0x328 to 0x329:
=> 0x00000328 <microblaze_disable_dcache+16>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000884 in Xil_DCacheDisable ()
Dump of assembler code from 0x884 to 0x885:
=> 0x00000884 <Xil_DCacheDisable+68>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000888 in Xil_DCacheDisable ()
Dump of assembler code from 0x888 to 0x889:
=> 0x00000888 <Xil_DCacheDisable+72>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
disable_caches () at ../src/platform.c:76
76	    Xil_ICacheDisable();
Dump of assembler code from 0x68c to 0x68d:
=> 0x0000068c <disable_caches+28>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000890 in Xil_ICacheDisable ()
Dump of assembler code from 0x890 to 0x891:
=> 0x00000890 <Xil_ICacheDisable+0>:	fc ff 21 30	addik	r1, r1, -4
End of assembler dump.
0x00000894 in Xil_ICacheDisable ()
Dump of assembler code from 0x894 to 0x895:
=> 0x00000894 <Xil_ICacheDisable+4>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000898 in Xil_ICacheDisable ()
Dump of assembler code from 0x898 to 0x899:
=> 0x00000898 <Xil_ICacheDisable+8>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x0000034c in microblaze_invalidate_cache_ext ()
Dump of assembler code from 0x34c to 0x34d:
=> 0x0000034c <microblaze_invalidate_cache_ext+0>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x000008a4 in Xil_ICacheDisable ()
Dump of assembler code from 0x8a4 to 0x8a5:
=> 0x000008a4 <Xil_ICacheDisable+20>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x0000035c in microblaze_invalidate_icache ()
Dump of assembler code from 0x35c to 0x35d:
=> 0x0000035c <microblaze_invalidate_icache+0>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x000008b0 in Xil_ICacheDisable ()
Dump of assembler code from 0x8b0 to 0x8b1:
=> 0x000008b0 <Xil_ICacheDisable+32>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x00000330 in microblaze_disable_icache ()
Dump of assembler code from 0x330 to 0x331:
=> 0x00000330 <microblaze_disable_icache+0>:	01 80 00 95	mfs	r8, rmsr
End of assembler dump.
0x00000334 in microblaze_disable_icache ()
Dump of assembler code from 0x334 to 0x335:
=> 0x00000334 <microblaze_disable_icache+4>:	df ff 08 a5	andi	r8, r8, -33
End of assembler dump.
0x00000338 in microblaze_disable_icache ()
Dump of assembler code from 0x338 to 0x339:
=> 0x00000338 <microblaze_disable_icache+8>:	01 c0 08 94	mts	rmsr, r8
End of assembler dump.
0x0000033c in microblaze_disable_icache ()
Dump of assembler code from 0x33c to 0x33d:
=> 0x0000033c <microblaze_disable_icache+12>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x000008bc in Xil_ICacheDisable ()
Dump of assembler code from 0x8bc to 0x8bd:
=> 0x000008bc <Xil_ICacheDisable+44>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x000008c0 in Xil_ICacheDisable ()
Dump of assembler code from 0x8c0 to 0x8c1:
=> 0x000008c0 <Xil_ICacheDisable+48>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
disable_caches () at ../src/platform.c:79
79	}
Dump of assembler code from 0x698 to 0x699:
=> 0x00000698 <disable_caches+40>:	00 00 00 80	or	r0, r0, r0
End of assembler dump.
0x0000069c	79	}
Dump of assembler code from 0x69c to 0x69d:
=> 0x0000069c <disable_caches+44>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x000006a0	79	}
Dump of assembler code from 0x6a0 to 0x6a1:
=> 0x000006a0 <disable_caches+48>:	00 00 33 10	addk	r1, r19, r0
End of assembler dump.
0x000006a4	79	}
Dump of assembler code from 0x6a4 to 0x6a5:
=> 0x000006a4 <disable_caches+52>:	04 00 61 ea	lwi	r19, r1, 4
End of assembler dump.
0x000006a8 in disable_caches () at ../src/platform.c:79
79	}
Dump of assembler code from 0x6a8 to 0x6a9:
=> 0x000006a8 <disable_caches+56>:	08 00 21 30	addik	r1, r1, 8
End of assembler dump.
0x000006ac	79	}
Dump of assembler code from 0x6ac to 0x6ad:
=> 0x000006ac <disable_caches+60>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
cleanup_platform () at ../src/platform.c:111
111	}
Dump of assembler code from 0x738 to 0x739:
=> 0x00000738 <cleanup_platform+28>:	00 00 00 80	or	r0, r0, r0
End of assembler dump.
0x0000073c	111	}
Dump of assembler code from 0x73c to 0x73d:
=> 0x0000073c <cleanup_platform+32>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000740	111	}
Dump of assembler code from 0x740 to 0x741:
=> 0x00000740 <cleanup_platform+36>:	00 00 33 10	addk	r1, r19, r0
End of assembler dump.
0x00000744	111	}
Dump of assembler code from 0x744 to 0x745:
=> 0x00000744 <cleanup_platform+40>:	1c 00 61 ea	lwi	r19, r1, 28
End of assembler dump.
0x00000748 in cleanup_platform () at ../src/platform.c:111
111	}
Dump of assembler code from 0x748 to 0x749:
=> 0x00000748 <cleanup_platform+44>:	20 00 21 30	addik	r1, r1, 32
End of assembler dump.
0x0000074c	111	}
Dump of assembler code from 0x74c to 0x74d:
=> 0x0000074c <cleanup_platform+48>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
main () at ../src/helloworld.c:60
60	    return 0;
Dump of assembler code from 0x610 to 0x611:
=> 0x00000610 <main+60>:	00 00 60 10	addk	r3, r0, r0
End of assembler dump.
61	}
Dump of assembler code from 0x614 to 0x615:
=> 0x00000614 <main+64>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000618	61	}
Dump of assembler code from 0x618 to 0x619:
=> 0x00000618 <main+68>:	00 00 33 10	addk	r1, r19, r0
End of assembler dump.
0x0000061c	61	}
Dump of assembler code from 0x61c to 0x61d:
=> 0x0000061c <main+72>:	1c 00 61 ea	lwi	r19, r1, 28
End of assembler dump.
0x00000620 in main () at ../src/helloworld.c:61
61	}
Dump of assembler code from 0x620 to 0x621:
=> 0x00000620 <main+76>:	20 00 21 30	addik	r1, r1, 32
End of assembler dump.
0x00000624	61	}
Dump of assembler code from 0x624 to 0x625:
=> 0x00000624 <main+80>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x000002c0 in _crtinit ()
Dump of assembler code from 0x2c0 to 0x2c1:
=> 0x000002c0 <_crtinit+132>:	00 00 63 32	addik	r19, r3, 0
End of assembler dump.
0x000002c4 in _crtinit ()
Dump of assembler code from 0x2c4 to 0x2c5:
=> 0x000002c4 <_crtinit+136>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000ab8 in __fini ()
Dump of assembler code from 0xab8 to 0xab9:
=> 0x00000ab8 <__fini+0>:	f0 ff 21 30	addik	r1, r1, -16
End of assembler dump.
0x00000abc in __fini ()
Dump of assembler code from 0xabc to 0xabd:
=> 0x00000abc <__fini+4>:	00 08 e0 d9	sw	r15, r0, r1
End of assembler dump.
0x00000ac0 in __fini ()
Dump of assembler code from 0xac0 to 0xac1:
=> 0x00000ac0 <__fini+8>:	ff ff 00 b0	imm	-1
End of assembler dump.
0x00000124 in __do_global_dtors_aux ()
Dump of assembler code from 0x124 to 0x125:
=> 0x00000124 <__do_global_dtors_aux+0>:	00 00 00 b0	imm	0
End of assembler dump.
0x0000012c in __do_global_dtors_aux ()
Dump of assembler code from 0x12c to 0x12d:
=> 0x0000012c <__do_global_dtors_aux+8>:	c4 00 23 bc	bnei	r3, 196	// 0x1f0 <__do_global_dtors_aux+204>
End of assembler dump.
0x00000130 in __do_global_dtors_aux ()
Dump of assembler code from 0x130 to 0x131:
=> 0x00000130 <__do_global_dtors_aux+12>:	dc ff 21 30	addik	r1, r1, -36
End of assembler dump.
0x00000134 in __do_global_dtors_aux ()
Dump of assembler code from 0x134 to 0x135:
=> 0x00000134 <__do_global_dtors_aux+16>:	1c 00 61 fa	swi	r19, r1, 28
End of assembler dump.
0x00000138 in __do_global_dtors_aux ()
Dump of assembler code from 0x138 to 0x139:
=> 0x00000138 <__do_global_dtors_aux+20>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000140 in __do_global_dtors_aux ()
Dump of assembler code from 0x140 to 0x141:
=> 0x00000140 <__do_global_dtors_aux+28>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000148 in __do_global_dtors_aux ()
Dump of assembler code from 0x148 to 0x149:
=> 0x00000148 <__do_global_dtors_aux+36>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000150 in __do_global_dtors_aux ()
Dump of assembler code from 0x150 to 0x151:
=> 0x00000150 <__do_global_dtors_aux+44>:	20 00 c1 fa	swi	r22, r1, 32
End of assembler dump.
0x00000154 in __do_global_dtors_aux ()
Dump of assembler code from 0x154 to 0x155:
=> 0x00000154 <__do_global_dtors_aux+48>:	00 98 64 16	rsubk	r19, r4, r19
End of assembler dump.
0x00000158 in __do_global_dtors_aux ()
Dump of assembler code from 0x158 to 0x159:
=> 0x00000158 <__do_global_dtors_aux+52>:	02 02 73 66	bsrai	r19, r19, 2
End of assembler dump.
0x0000015c in __do_global_dtors_aux ()
Dump of assembler code from 0x15c to 0x15d:
=> 0x0000015c <__do_global_dtors_aux+56>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000160 in __do_global_dtors_aux ()
Dump of assembler code from 0x160 to 0x161:
=> 0x00000160 <__do_global_dtors_aux+60>:	ff ff 73 32	addik	r19, r19, -1
End of assembler dump.
0x00000164 in __do_global_dtors_aux ()
Dump of assembler code from 0x164 to 0x165:
=> 0x00000164 <__do_global_dtors_aux+64>:	00 00 00 b0	imm	0
End of assembler dump.
0x0000016c in __do_global_dtors_aux ()
Dump of assembler code from 0x16c to 0x16d:
=> 0x0000016c <__do_global_dtors_aux+72>:	03 18 53 16	cmpu	r18, r19, r3
End of assembler dump.
0x00000170 in __do_global_dtors_aux ()
Dump of assembler code from 0x170 to 0x171:
=> 0x00000170 <__do_global_dtors_aux+76>:	34 00 b2 be	bgeid	r18, 52	// 0x1a4 <__do_global_dtors_aux+128>
End of assembler dump.
0x000001a4 in __do_global_dtors_aux ()
Dump of assembler code from 0x1a4 to 0x1a5:
=> 0x000001a4 <__do_global_dtors_aux+128>:	e0 fe f4 b9	brlid	r15, -288	// 0x84 <deregister_tm_clones>
End of assembler dump.
0x00000084 in deregister_tm_clones ()
Dump of assembler code from 0x84 to 0x85:
=> 0x00000084 <deregister_tm_clones+0>:	00 00 00 b0	imm	0
End of assembler dump.
0x0000008c in deregister_tm_clones ()
Dump of assembler code from 0x8c to 0x8d:
=> 0x0000008c <deregister_tm_clones+8>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000094 in deregister_tm_clones ()
Dump of assembler code from 0x94 to 0x95:
=> 0x00000094 <deregister_tm_clones+16>:	00 28 63 88	xor	r3, r3, r5
End of assembler dump.
0x00000098 in deregister_tm_clones ()
Dump of assembler code from 0x98 to 0x99:
=> 0x00000098 <deregister_tm_clones+20>:	2c 00 03 bc	beqi	r3, 44	// 0xc4 <deregister_tm_clones+64>
End of assembler dump.
0x000000c4 in deregister_tm_clones ()
Dump of assembler code from 0xc4 to 0xc5:
=> 0x000000c4 <deregister_tm_clones+64>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x000001ac in __do_global_dtors_aux ()
Dump of assembler code from 0x1ac to 0x1ad:
=> 0x000001ac <__do_global_dtors_aux+136>:	00 00 00 b0	imm	0
End of assembler dump.
0x000001b4 in __do_global_dtors_aux ()
Dump of assembler code from 0x1b4 to 0x1b5:
=> 0x000001b4 <__do_global_dtors_aux+144>:	20 00 03 be	beqid	r3, 32	// 0x1d4 <__do_global_dtors_aux+176>
End of assembler dump.
0x000001d4 in __do_global_dtors_aux ()
Dump of assembler code from 0x1d4 to 0x1d5:
=> 0x000001d4 <__do_global_dtors_aux+176>:	1c 00 61 ea	lwi	r19, r1, 28
End of assembler dump.
0x000001d8 in __do_global_dtors_aux ()
Dump of assembler code from 0x1d8 to 0x1d9:
=> 0x000001d8 <__do_global_dtors_aux+180>:	20 00 c1 ea	lwi	r22, r1, 32
End of assembler dump.
0x000001dc in __do_global_dtors_aux ()
Dump of assembler code from 0x1dc to 0x1dd:
=> 0x000001dc <__do_global_dtors_aux+184>:	01 00 60 30	addik	r3, r0, 1	// 0x1 <_start+1>
End of assembler dump.
0x000001e0 in __do_global_dtors_aux ()
Dump of assembler code from 0x1e0 to 0x1e1:
=> 0x000001e0 <__do_global_dtors_aux+188>:	00 00 00 b0	imm	0
End of assembler dump.
0x000001e8 in __do_global_dtors_aux ()
Dump of assembler code from 0x1e8 to 0x1e9:
=> 0x000001e8 <__do_global_dtors_aux+196>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000acc in __fini ()
Dump of assembler code from 0xacc to 0xacd:
=> 0x00000acc <__fini+20>:	00 08 e0 c9	lw	r15, r0, r1
End of assembler dump.
0x00000ad0 in __fini ()
Dump of assembler code from 0xad0 to 0xad1:
=> 0x00000ad0 <__fini+24>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x000002d0 in _crtinit ()
Dump of assembler code from 0x2d0 to 0x2d1:
=> 0x000002d0 <_crtinit+148>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000574 in _program_clean ()
Dump of assembler code from 0x574 to 0x575:
=> 0x00000574 <_program_clean+0>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x000002dc in _crtinit ()
Dump of assembler code from 0x2dc to 0x2dd:
=> 0x000002dc <_crtinit+160>:	00 00 e1 c9	lw	r15, r1, r0
End of assembler dump.
0x000002e0 in _crtinit ()
Dump of assembler code from 0x2e0 to 0x2e1:
=> 0x000002e0 <_crtinit+164>:	00 00 73 30	addik	r3, r19, 0
End of assembler dump.
0x000002e4 in _crtinit ()
Dump of assembler code from 0x2e4 to 0x2e5:
=> 0x000002e4 <_crtinit+168>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000074 in _start1 ()
Dump of assembler code from 0x74 to 0x75:
=> 0x00000074 <_start1+36>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000364 in exit ()
Dump of assembler code from 0x364 to 0x365:
=> 0x00000364 <exit+0>:	e0 ff 21 30	addik	r1, r1, -32
End of assembler dump.
0x00000368 in exit ()
Dump of assembler code from 0x368 to 0x369:
=> 0x00000368 <exit+4>:	00 00 c0 10	addk	r6, r0, r0
End of assembler dump.
0x0000036c in exit ()
Dump of assembler code from 0x36c to 0x36d:
=> 0x0000036c <exit+8>:	1c 00 61 fa	swi	r19, r1, 28
End of assembler dump.
0x00000370 in exit ()
Dump of assembler code from 0x370 to 0x371:
=> 0x00000370 <exit+12>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x00000374 in exit ()
Dump of assembler code from 0x374 to 0x375:
=> 0x00000374 <exit+16>:	00 00 00 b0	imm	0
End of assembler dump.
0x000003a4 in __call_exitprocs ()
Dump of assembler code from 0x3a4 to 0x3a5:
=> 0x000003a4 <__call_exitprocs+0>:	b8 ff 21 30	addik	r1, r1, -72
End of assembler dump.
0x000003a8 in __call_exitprocs ()
Dump of assembler code from 0x3a8 to 0x3a9:
=> 0x000003a8 <__call_exitprocs+4>:	28 00 01 fb	swi	r24, r1, 40
End of assembler dump.
0x000003ac in __call_exitprocs ()
Dump of assembler code from 0x3ac to 0x3ad:
=> 0x000003ac <__call_exitprocs+8>:	00 00 00 b0	imm	0
End of assembler dump.
0x000003b4 in __call_exitprocs ()
Dump of assembler code from 0x3b4 to 0x3b5:
=> 0x000003b4 <__call_exitprocs+16>:	2c 00 21 fb	swi	r25, r1, 44
End of assembler dump.
0x000003b8 in __call_exitprocs ()
Dump of assembler code from 0x3b8 to 0x3b9:
=> 0x000003b8 <__call_exitprocs+20>:	34 00 61 fb	swi	r27, r1, 52
End of assembler dump.
0x000003bc in __call_exitprocs ()
Dump of assembler code from 0x3bc to 0x3bd:
=> 0x000003bc <__call_exitprocs+24>:	3c 00 a1 fb	swi	r29, r1, 60
End of assembler dump.
0x000003c0 in __call_exitprocs ()
Dump of assembler code from 0x3c0 to 0x3c1:
=> 0x000003c0 <__call_exitprocs+28>:	00 00 65 13	addk	r27, r5, r0
End of assembler dump.
0x000003c4 in __call_exitprocs ()
Dump of assembler code from 0x3c4 to 0x3c5:
=> 0x000003c4 <__call_exitprocs+32>:	00 00 a6 13	addk	r29, r6, r0
End of assembler dump.
0x000003c8 in __call_exitprocs ()
Dump of assembler code from 0x3c8 to 0x3c9:
=> 0x000003c8 <__call_exitprocs+36>:	00 00 00 b0	imm	0
End of assembler dump.
0x000003d0 in __call_exitprocs ()
Dump of assembler code from 0x3d0 to 0x3d1:
=> 0x000003d0 <__call_exitprocs+44>:	24 00 e1 fa	swi	r23, r1, 36
End of assembler dump.
0x000003d4 in __call_exitprocs ()
Dump of assembler code from 0x3d4 to 0x3d5:
=> 0x000003d4 <__call_exitprocs+48>:	30 00 41 fb	swi	r26, r1, 48
End of assembler dump.
0x000003d8 in __call_exitprocs ()
Dump of assembler code from 0x3d8 to 0x3d9:
=> 0x000003d8 <__call_exitprocs+52>:	00 00 e1 f9	swi	r15, r1, 0
End of assembler dump.
0x000003dc in __call_exitprocs ()
Dump of assembler code from 0x3dc to 0x3dd:
=> 0x000003dc <__call_exitprocs+56>:	1c 00 61 fa	swi	r19, r1, 28
End of assembler dump.
0x000003e0 in __call_exitprocs ()
Dump of assembler code from 0x3e0 to 0x3e1:
=> 0x000003e0 <__call_exitprocs+60>:	20 00 c1 fa	swi	r22, r1, 32
End of assembler dump.
0x000003e4 in __call_exitprocs ()
Dump of assembler code from 0x3e4 to 0x3e5:
=> 0x000003e4 <__call_exitprocs+64>:	38 00 81 fb	swi	r28, r1, 56
End of assembler dump.
0x000003e8 in __call_exitprocs ()
Dump of assembler code from 0x3e8 to 0x3e9:
=> 0x000003e8 <__call_exitprocs+68>:	40 00 c1 fb	swi	r30, r1, 64
End of assembler dump.
0x000003ec in __call_exitprocs ()
Dump of assembler code from 0x3ec to 0x3ed:
=> 0x000003ec <__call_exitprocs+72>:	44 00 e1 fb	swi	r31, r1, 68
End of assembler dump.
0x000003f0 in __call_exitprocs ()
Dump of assembler code from 0x3f0 to 0x3f1:
=> 0x000003f0 <__call_exitprocs+76>:	48 00 58 33	addik	r26, r24, 72
End of assembler dump.
0x000003f4 in __call_exitprocs ()
Dump of assembler code from 0x3f4 to 0x3f5:
=> 0x000003f4 <__call_exitprocs+80>:	01 00 e0 32	addik	r23, r0, 1	// 0x1 <_start+1>
End of assembler dump.
0x000003f8 in __call_exitprocs ()
Dump of assembler code from 0x3f8 to 0x3f9:
=> 0x000003f8 <__call_exitprocs+84>:	48 00 d8 ea	lwi	r22, r24, 72
End of assembler dump.
0x000003fc in __call_exitprocs ()
Dump of assembler code from 0x3fc to 0x3fd:
=> 0x000003fc <__call_exitprocs+88>:	80 00 16 be	beqid	r22, 128	// 0x47c <__call_exitprocs+216>
End of assembler dump.
0x0000047c in __call_exitprocs ()
Dump of assembler code from 0x47c to 0x47d:
=> 0x0000047c <__call_exitprocs+216>:	00 00 e1 e9	lwi	r15, r1, 0
End of assembler dump.
0x00000480 in __call_exitprocs ()
Dump of assembler code from 0x480 to 0x481:
=> 0x00000480 <__call_exitprocs+220>:	1c 00 61 ea	lwi	r19, r1, 28
End of assembler dump.
0x00000484 in __call_exitprocs ()
Dump of assembler code from 0x484 to 0x485:
=> 0x00000484 <__call_exitprocs+224>:	20 00 c1 ea	lwi	r22, r1, 32
End of assembler dump.
0x00000488 in __call_exitprocs ()
Dump of assembler code from 0x488 to 0x489:
=> 0x00000488 <__call_exitprocs+228>:	24 00 e1 ea	lwi	r23, r1, 36
End of assembler dump.
0x0000048c in __call_exitprocs ()
Dump of assembler code from 0x48c to 0x48d:
=> 0x0000048c <__call_exitprocs+232>:	28 00 01 eb	lwi	r24, r1, 40
End of assembler dump.
0x00000490 in __call_exitprocs ()
Dump of assembler code from 0x490 to 0x491:
=> 0x00000490 <__call_exitprocs+236>:	2c 00 21 eb	lwi	r25, r1, 44
End of assembler dump.
0x00000494 in __call_exitprocs ()
Dump of assembler code from 0x494 to 0x495:
=> 0x00000494 <__call_exitprocs+240>:	30 00 41 eb	lwi	r26, r1, 48
End of assembler dump.
0x00000498 in __call_exitprocs ()
Dump of assembler code from 0x498 to 0x499:
=> 0x00000498 <__call_exitprocs+244>:	34 00 61 eb	lwi	r27, r1, 52
End of assembler dump.
0x0000049c in __call_exitprocs ()
Dump of assembler code from 0x49c to 0x49d:
=> 0x0000049c <__call_exitprocs+248>:	38 00 81 eb	lwi	r28, r1, 56
End of assembler dump.
0x000004a0 in __call_exitprocs ()
Dump of assembler code from 0x4a0 to 0x4a1:
=> 0x000004a0 <__call_exitprocs+252>:	3c 00 a1 eb	lwi	r29, r1, 60
End of assembler dump.
0x000004a4 in __call_exitprocs ()
Dump of assembler code from 0x4a4 to 0x4a5:
=> 0x000004a4 <__call_exitprocs+256>:	40 00 c1 eb	lwi	r30, r1, 64
End of assembler dump.
0x000004a8 in __call_exitprocs ()
Dump of assembler code from 0x4a8 to 0x4a9:
=> 0x000004a8 <__call_exitprocs+260>:	44 00 e1 eb	lwi	r31, r1, 68
End of assembler dump.
0x000004ac in __call_exitprocs ()
Dump of assembler code from 0x4ac to 0x4ad:
=> 0x000004ac <__call_exitprocs+264>:	08 00 0f b6	rtsd	r15, 8
End of assembler dump.
0x00000380 in exit ()
Dump of assembler code from 0x380 to 0x381:
=> 0x00000380 <exit+28>:	00 00 00 b0	imm	0
End of assembler dump.
0x00000388 in exit ()
Dump of assembler code from 0x388 to 0x389:
=> 0x00000388 <exit+36>:	28 00 65 e8	lwi	r3, r5, 40
End of assembler dump.
0x0000038c in exit ()
Dump of assembler code from 0x38c to 0x38d:
=> 0x0000038c <exit+40>:	0c 00 03 bc	beqi	r3, 12	// 0x398 <exit+52>
End of assembler dump.
0x00000398 in exit ()
Dump of assembler code from 0x398 to 0x399:
=> 0x00000398 <exit+52>:	ff ff 00 b0	imm	-1
End of assembler dump.

Breakpoint 1, 0x00000080 in _exit ()
Dump of assembler code from 0x80 to 0x81:
=> 0x00000080 <_exit+0>:	00 00 00 b8	bri	0	// 0x80 <_exit>
End of assembler dump.
